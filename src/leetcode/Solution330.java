package leetcode;

/**
 * @description: 按要求补齐数组
 * 给定一个已排序的正整数数组 nums，和一个正整数 n 。
 * 从 [1, n] 区间内选取任意个数字补充到 nums 中，使得 [1, n] 区间内的任何数字都可以用 nums 中某几个数字的和来表示。
 * 请输出满足上述要求的最少需要补充的数字个数。
 *
 * 输入: nums = [1,3], n = 6
 * 输出: 1
 * 解释:
 * 根据 nums 里现有的组合 [1], [3], [1,3]，可以得出 1, 3, 4。
 * 现在如果我们将 2 添加到 nums 中， 组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。
 * 其和可以表示数字 1, 2, 3, 4, 5, 6，能够覆盖 [1, 6] 区间里所有的数。
 * 所以我们最少需要添加一个数字。
 *
 * 输入: nums = [1,5,10], n = 20
 * 输出: 2
 * 解释: 我们需要添加 [2, 4]。
 *
 * 输入: nums = [1,2,2], n = 5
 * 输出: 0
 * @author: Deepcola
 * @time: 2020/12/29 0:01
 */
public class Solution330 {

    /**
     * 贪心算法: 每次找到最小的一个未被数组覆盖的 x, 添加 x 使得覆盖区间变到 2x,然后继续寻找下一个
     * 核心: 对于正整数 x, 在区间[1, x - 1]上的所有数都被覆盖, 添加 x 后, 区间[1, 2x - 1]的所有数被覆盖
     *     由于必须有 1,对于 x(初始为 1)进行判断:
     *          如果数组中当前位置 index 对应的 nums[index] <= x, 就将 nums[index] + x;
     *          反之, 由于在这之前 [1, x-1] 都已经被覆盖, 只需将 x 添加到数组,
     *          -> 当 index 超过数组下界时,同样的需要添加 x
     */
    public int minPatches(int[] nums, int n) {
        int index = 0;// 遍历下标
        int patch = 0;// 添加的个数
        long x = 1;
        // 检索表示区间范围是否满足要求
        while (x <= n) {
            if (index < nums.length && nums[index] <= x) {
                // x 被覆盖
                // 不需要添加 -> 最大表示区间[1, x + nums[index] - 1]
                x += nums[index];
                index++;
            }else {
                // x 没有被覆盖
                // 添加 x -> 最大表示区间[1, 2x - 1]
                x *= 2;
                patch++;
            }
        }
        return patch;
    }
}
